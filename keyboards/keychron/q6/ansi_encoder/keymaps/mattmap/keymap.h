#pragma once

#include <stdint.h>
#include "keychron_common.h"
#include "keycodes.h"
#include "color.h"
#include "util.h"

// Type definitions

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN,
  STNGS
};

typedef union {
  uint32_t raw;
  struct {
        bool caps_lock_indicator :1;
        bool num_lock_indicator :1;
        bool scroll_lock_indicator :1;
        bool setting_indicators :1;
        bool layer_mask :1;
        bool bright_layer_mask :1;
        bool gradient :1;
        uint8_t gradient_intensity :4;
        uint8_t gradient_direction :2;
        bool ripples :1;
        uint8_t ripple_intensity :4;
        bool rgb_peek :1;
  };
} user_config_t;

typedef struct led_location {
    uint8_t row: 8;
    uint8_t col: 8;
} PACKED led_location;

enum via_user_value_id {
    id_caps_lock_indicator = 0x01,
    id_num_lock_indicator = 0x02,
    id_scroll_lock_indicator = 0x03,
    id_setting_indicators = 0x04,
    id_layer_mask = 0x05,
    id_bright_layer_mask  = 0x06,
    id_gradient = 0x07,
    id_gradient_intensity = 0x08,
    id_gradient_direction = 0x09,
    id_ripples = 0x0A,
    id_ripple_intensity = 0x0B,
    id_rgb_peek = 0x0C
};

// Keycode definitions.

enum user_keycodes {
    SETTING_TOGGLE_CAPS_LOCK_INDICATOR = KC_CORTANA + 1,
    SETTING_TOGGLE_NUM_LOCK_INDICATOR,
    SETTING_TOGGLE_SCROLL_LOCK_INDICATOR,
    SETTING_TOGGLE_SETTING_INDICATORS,
    SETTING_TOGGLE_LAYER_MASK,
    SETTING_TOGGLE_BRIGHT_LAYER_MASK,
    SETTING_TOGGLE_RGB_GRADIENT,
    SETTING_TOGGLE_REACTIVE_RIPPLES,
    SETTING_TOGGLE_RGB_PEEK,

    SETTING_RGB_GRADIENT_DIRECTION_UP,
    SETTING_RGB_GRADIENT_DIRECTION_RIGHT,
    SETTING_RGB_GRADIENT_DIRECTION_DOWN,
    SETTING_RGB_GRADIENT_DIRECTION_LEFT,

    SETTING_RGB_GRADIENT_INTENSITY_1,
    SETTING_RGB_GRADIENT_INTENSITY_2,
    SETTING_RGB_GRADIENT_INTENSITY_3,
    SETTING_RGB_GRADIENT_INTENSITY_4,
    SETTING_RGB_GRADIENT_INTENSITY_5,
    SETTING_RGB_GRADIENT_INTENSITY_6,
    SETTING_RGB_GRADIENT_INTENSITY_7,
    SETTING_RGB_GRADIENT_INTENSITY_8,
    SETTING_RGB_GRADIENT_INTENSITY_9,
    SETTING_RGB_GRADIENT_INTENSITY_10,

    SETTING_RGB_RIPPLE_INTENSITY_1,
    SETTING_RGB_RIPPLE_INTENSITY_2,
    SETTING_RGB_RIPPLE_INTENSITY_3,
    SETTING_RGB_RIPPLE_INTENSITY_4,
    SETTING_RGB_RIPPLE_INTENSITY_5,
    SETTING_RGB_RIPPLE_INTENSITY_6,
    SETTING_RGB_RIPPLE_INTENSITY_7,
    SETTING_RGB_RIPPLE_INTENSITY_8,
    SETTING_RGB_RIPPLE_INTENSITY_9,
    SETTING_RGB_RIPPLE_INTENSITY_10,

    RGB_MODE_SOLID,
    RGB_MODE_BREATHING,
    RGB_MODE_BAND_SPIRAL_VAL,
    RGB_MODE_CYCLE_ALL,
    RGB_MODE_CYCLE_LEFT_RIGHT,
    RGB_MODE_CYCLE_UP_DOWN,
    RGB_MODE_RAINBOW_MOVING_CHEVRON,
    RGB_MODE_CYCLE_OUT_IN,
    RGB_MODE_CYCLE_OUT_IN_DUAL,
    RGB_MODE_CYCLE_PINWHEEL,
    RGB_MODE_CYCLE_SPIRAL,
    RGB_MODE_DUAL_BEACON,
    RGB_MODE_RAINBOW_BEACON,
    RGB_MODE_FLOWER_BLOOMING,
    RGB_MODE_JELLYBEAN_RAINDROPS,
    RGB_MODE_PIXEL_RAIN,
    RGB_MODE_TYPING_HEATMAP,
    RGB_MODE_DIGITAL_RAIN,
    RGB_MODE_SOLID_REACTIVE_SIMPLE,
    RGB_MODE_SOLID_REACTIVE_MULTIWIDE,
    RGB_MODE_SOLID_REACTIVE_MULTINEXUS,
    RGB_MODE_SPLASH,
    RGB_MODE_SOLID_SPLASH,
    RGB_MODE_SOLID_MULTISPLASH,
    RGB_MODE_STARLIGHT_DUAL_HUE,
    RGB_MODE_RIVERFLOW
};

#define STN_CLI SETTING_TOGGLE_CAPS_LOCK_INDICATOR
#define STN_NLI SETTING_TOGGLE_NUM_LOCK_INDICATOR
#define STN_SLI SETTING_TOGGLE_SCROLL_LOCK_INDICATOR
#define STN_SI  SETTING_TOGGLE_SETTING_INDICATORS
#define STN_LM  SETTING_TOGGLE_LAYER_MASK
#define STN_BLM SETTING_TOGGLE_BRIGHT_LAYER_MASK
#define STN_GRD SETTING_TOGGLE_RGB_GRADIENT
#define STN_RIP SETTING_TOGGLE_REACTIVE_RIPPLES
#define STN_RPK SETTING_TOGGLE_RGB_PEEK

#define STN_GD_U SETTING_RGB_GRADIENT_DIRECTION_UP
#define STN_GD_R SETTING_RGB_GRADIENT_DIRECTION_RIGHT
#define STN_GD_D SETTING_RGB_GRADIENT_DIRECTION_DOWN
#define STN_GD_L SETTING_RGB_GRADIENT_DIRECTION_LEFT

#define STN_GI_1 SETTING_RGB_GRADIENT_INTENSITY_1
#define STN_GI_2 SETTING_RGB_GRADIENT_INTENSITY_2
#define STN_GI_3 SETTING_RGB_GRADIENT_INTENSITY_3
#define STN_GI_4 SETTING_RGB_GRADIENT_INTENSITY_4
#define STN_GI_5 SETTING_RGB_GRADIENT_INTENSITY_5
#define STN_GI_6 SETTING_RGB_GRADIENT_INTENSITY_6
#define STN_GI_7 SETTING_RGB_GRADIENT_INTENSITY_7
#define STN_GI_8 SETTING_RGB_GRADIENT_INTENSITY_8
#define STN_GI_9 SETTING_RGB_GRADIENT_INTENSITY_9
#define STN_GI_10 SETTING_RGB_GRADIENT_INTENSITY_10

#define STN_RI_1 SETTING_RGB_RIPPLE_INTENSITY_1
#define STN_RI_2 SETTING_RGB_RIPPLE_INTENSITY_2
#define STN_RI_3 SETTING_RGB_RIPPLE_INTENSITY_3
#define STN_RI_4 SETTING_RGB_RIPPLE_INTENSITY_4
#define STN_RI_5 SETTING_RGB_RIPPLE_INTENSITY_5
#define STN_RI_6 SETTING_RGB_RIPPLE_INTENSITY_6
#define STN_RI_7 SETTING_RGB_RIPPLE_INTENSITY_7
#define STN_RI_8 SETTING_RGB_RIPPLE_INTENSITY_8
#define STN_RI_9 SETTING_RGB_RIPPLE_INTENSITY_9
#define STN_RI_10 SETTING_RGB_RIPPLE_INTENSITY_10

#define RGB_M_S  RGB_MODE_SOLID
#define RGB_M_BR RGB_MODE_BREATHING
#define RGB_M_CA RGB_MODE_CYCLE_ALL
#define RGB_M_BS RGB_MODE_BAND_SPIRAL_VAL
#define RGB_M_CA RGB_MODE_CYCLE_ALL
#define RGB_M_CX RGB_MODE_CYCLE_LEFT_RIGHT
#define RGB_M_CY RGB_MODE_CYCLE_UP_DOWN
#define RGB_M_RC RGB_MODE_RAINBOW_MOVING_CHEVRON
#define RGB_M_CO RGB_MODE_CYCLE_OUT_IN
#define RGB_M_CD RGB_MODE_CYCLE_OUT_IN_DUAL
#define RGB_M_CP RGB_MODE_CYCLE_PINWHEEL
#define RGB_M_CS RGB_MODE_CYCLE_SPIRAL
#define RGB_M_DB RGB_MODE_DUAL_BEACON
#define RGB_M_RB RGB_MODE_RAINBOW_BEACON
#define RGB_M_FB RGB_MODE_FLOWER_BLOOMING
#define RGB_M_JR RGB_MODE_JELLYBEAN_RAINDROPS
#define RGB_M_PR RGB_MODE_PIXEL_RAIN
#define RGB_M_TH RGB_MODE_TYPING_HEATMAP
#define RGB_M_DR RGB_MODE_DIGITAL_RAIN
#define RGB_M_RS RGB_MODE_SOLID_REACTIVE_SIMPLE
#define RGB_M_RM RGB_MODE_SOLID_REACTIVE_MULTIWIDE
#define RGB_M_RN RGB_MODE_SOLID_REACTIVE_MULTINEXUS
#define RGB_M_SP RGB_MODE_SPLASH
#define RGB_M_SS RGB_MODE_SOLID_SPLASH
#define RGB_M_SM RGB_MODE_SOLID_MULTISPLASH
#define RGB_M_SD RGB_MODE_STARLIGHT_DUAL_HUE
#define RGB_M_RF RGB_MODE_RIVERFLOW

#define RGB_INDICATE(CONDITION) if (CONDITION) { set_indicator_hsv(hsv); return false; } break;


// Prototypes

bool via_user_set_value(uint8_t *data);
bool via_user_get_value(uint8_t *data);
bool via_user_set_save(void);
